#N canvas 1346 89 431 207 10;
#X obj 109 40 inlet;
#X obj 109 124 outlet;
#X obj 109 61 t b b;
#X obj 136 103 outlet;
#X obj 148 40 inlet;
#X msg 148 60 value \$1 \$2;
#X obj 136 82 ofelia d -k \$0-XYpad;
#A __set local c = ofCanvas(this) \; local args = c:getArgs() \; local
xpos \, ypos \, width \, height \, minValX \, maxValX \, minValY \,
maxValY = args[1] \, args[2] \, args[3] \, args[4] \, args[5] \, args[6]
\, args[7] \, args[8] \; local mouseState = 0 \; local valueY = 0 \;
local valueX = 0 \; local fbo = ofFbo() \; \; function M.new() \; ofWindow.addListener("setup"
\, this) \; ofWindow.addListener("mousePressed" \, this) \; ofWindow.addListener("mouseDragged"
\, this) \; ofWindow.addListener("mouseReleased" \, this) \; if ofWindow.exists
then \; M.setup() \; end \; end \; \; function M.free() \; ofWindow.removeListener("setup"
\, this) \; ofWindow.removeListener("mousePressed" \, this) \; ofWindow.removeListener("mouseDragged"
\, this) \; ofWindow.removeListener("mouseReleased" \, this) \; end
\; \; function M.setup() \; fbo:allocate(width \, height) \; M.render()
\; end \; \; function M.bang() \; ofSetColor(255) \; fbo:draw(xpos
\, ypos) \; end \; \; function M.mousePressed(e) \; if ofGetMouseX()
>= xpos + width / 10 and ofGetMouseX() <= xpos + width - width / 10
and ofGetMouseY() >= ypos + width / 10 and ofGetMouseY() <= ypos +
height - width / 10 then \; mouseState = 1 \; valueY = ofNormalize((-ofGetMouseY()
+ height - width / 10 + ypos-10) * (maxValY - minValY) / (height -
width / 5-20) + minValY \, minValY \, maxValY) \; valueX = ofNormalize((-ofGetMouseX()
+ height - width / 10 + xpos-10) * (maxValX - minValX) / (height -
width / 5-20) + minValX \, minValX \, maxValX) \; M.render() \; return
{ofLerp(maxValX \, minValX \, valueX) \, ofLerp(minValY \, maxValY
\, valueY)} \; end \; end \; \; function M.mouseDragged(e) \; if mouseState
== 1 then \; valueY = ofNormalize((-ofGetMouseY() + height - width
/ 10 + ypos-10) * (maxValY - minValY) / (height - width / 5-20) + minValY
\, minValY \, maxValY) \; valueX = ofNormalize((-ofGetMouseX() + height
- width / 10 + xpos-10) * (maxValX - minValX) / (height - width / 5-20)
+ minValX \, minValX \, maxValX) \; M.render() \; return {ofLerp(maxValX
\, minValX \, valueX) \, ofLerp(minValY \, maxValY \, valueY)} \; end
\; end \; \; function M.mouseReleased(e) \; mouseState = 0 \; end \;
\; function M.value(float) \; valueX = ofNormalize(float[1] \, maxValX
\, minValX) \; valueY = ofNormalize(float[2] \, minValY \, maxValY)
\; M.render() \; return {ofLerp(maxValX \, minValX \, valueX) \, ofLerp(minValY
\, maxValY \, valueY)} \; end \; \; function M.render() \; fbo:beginFbo()
\; ofClear(0) \; ofSetColor(0) \; ofDrawRectangle(0 \, 0 \, width \,
height) \; ofSetColor(255) \; ofDrawRectangle(width / 10 \, width /
10 \, width - width / 5 \, height - width / 5) \; ofSetColor(100 \,
200 \, 255) \; ofDrawRectangle(-valueX * (height - width / 5 -20) +
height -width / 10 - 20 \, -valueY * (height - width / 5 -20) + height
-width / 10 - 20 \, 20 \, 20 ) \; fbo:endFbo() \; end \;;
#X connect 0 0 2 0;
#X connect 2 0 1 0;
#X connect 2 1 6 0;
#X connect 4 0 5 0;
#X connect 5 0 6 0;
#X connect 6 0 3 0;
